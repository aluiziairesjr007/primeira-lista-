segunda lista

1- #include <stdio.h>
#include <stdlib.h>



int main(void){// função principal

int n;// variável do tipo inteiro
int soma;// outra variável do tipo inteiro

printf("digite o tamanho do vetor: ");// pedindo o tamanho do vetor
scanf("%d", &n);// lendo o tamanho 
int *v = (int *)malloc(n * sizeof(int));// alocação dinâmica 
int i;// variável do tipo inteiro

    for ( i = 0; i < n; i++){// laço de repetição 
    printf("digite um numero:  ");pedindo um número 
    scanf("%d", &v[i]);// lendo o número 
    }

    int maior,menor = v[0];// variável do tipo inteiro
    for ( i = 0; i < n; i++){// laço de repetição 
        if(v[i] > maior){// se o vetor de i for maior que maior,maior = vetor de i 
            maior = v[i];// maior recebendo vetor de i
            
            if(v[i] < menor){se o vetor de i for menor que menor,menor = vetor de i 
            	menor = v[i];// menor recebendo vetor de i
			}
		}
	}
  soma = maior + menor;// soma recebendo maior mais menor 
    
 printf("menor: %d\n",menor);// exibindo o valor de menor 
    printf("maior: %d\n",maior);// exibindo o valor de maior 
    printf("a soma de maior e menor : %d\n", soma);// exibindo a soma
    
    free(v);// liberando memória 

    return 0;
}



2- #include <stdio.h>
#include <stdlib.h>

int main(void) {
    int n, i;// variáveis do tipo inteiro 
    float m;variáveis do tipo real 
    m = 0.0;// m recebendo o valor de 0.0

printf("digite o numero de alunos: \n");// pedindo o número de alunos
scanf("%d", &n);// lendo o número 

float*vn=(float*)malloc(n*sizeof(float));// alocação dinâmica 
if (vn==NULL){
    printf("erro de memoria");
    exit(1);
}
    for (i=0; i<n; i++){// laço de repetição
        vn[i]=i;
        printf("digite as notas: \n", i+1);
        scanf("%f", &vn[i]);
        m = m + vn[i];
    }

    m = m/n;// m recebendo o valor de m dividido pra n

    printf("media =%.2f \n", m);// aparecendo o valor de media
    if(m >=7 ){// if pra dizer se foi aprovado
    	printf("aprovado");
	}
	if(m < 7){// if pra dizer se foi reprovado 
		printf("reprovado");
	}

    free(vn);// liberando memória 
    return 0;
}


3- 
#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
 
void preenche_ordenado(int n, int *v);// função ordenada
 
int main(void){// função principal
        	setlocale(LC_ALL, "Portuguese");
        	int n;
 
        	printf("Informe a quantidadde de elementos: \n");// pedindo a quantidade de elementos 
        	scanf("%d", &n);// lendo a quantidade
 
  int v[n];
  preenche_ordenado(n, v);// chamada da função 
 
return 0;
}
 
void preenche_ordenado(int n, int *v){ função da ordenada e seus devidos calculos 
  int i, j, aux=0;
 
  for(i=0;i<n;i++){
	printf("Insira o valor de [%d]: ", i);
	scanf("%d", &v[i]);
  }
  for(i=0;i<n;i++){
	for(j=0;j<n;j++){
  	if(v[i] < v[j]){
    	aux = v[i];
    	v[i] = v[j];
    	v[j] = aux;
  	}
	}
  }
  printf("\nValores Ordenados\n");
  for(i=0;i<n;i++){
	printf("Conteudo em [%d]: %d\n", i, v[i]);
  }
}
 




4- 
#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
 
int main() { função principal
  setlocale(LC_ALL, "Portuguese");
  double *vet, n;
  int i;
 
  do{
  printf("Quantos valores deseja armazenar: ");// valores desejados
  scanf("%lf", &n);
  printf("\n");
  }while (n < 10);
 
  vet = (double *) malloc(n * sizeof(double));// alocação dinâmica 
 
  for(i=0;i<10;i++){// laço de repetição 
	vet[i] = rand() % 100;
  }
  printf("**** Preencha o restante do vetor ****\n");
  for(i=10; i < n; i++){// laço de repetição 
	printf("Um valor para [%d]: ", i);
	scanf("%lf", &vet[i]);
  }
  printf("\n**** Conteudos no vetor ****\n");
   for(i=0;i<n;i++){// laço de reprtição 
	printf("[%d]: %.5lf\n", i, vet[i]);
  }
 
  return 0;
}
  

